{"ast":null,"code":"const initThreeScene = () => {\n  const scene = new THREE.Scene();\n  scene.background = new THREE.Color(0x202020); // Set the background color to something dark\n\n  const width = viewerRef.current.clientWidth;\n  const height = viewerRef.current.clientHeight;\n  const camera = new THREE.PerspectiveCamera(50, width / height, 0.1, 1000);\n  camera.position.z = 5;\n  const renderer = new THREE.WebGLRenderer({\n    antialias: true\n  });\n  renderer.outputEncoding = THREE.sRGBEncoding; // Ensure the renderer uses sRGB color space\n  renderer.setSize(width, height);\n  viewerRef.current.appendChild(renderer.domElement);\n  const controls = new OrbitControls(camera, renderer.domElement);\n  controls.enableDamping = true;\n\n  // Enhanced three-point lighting setup\n  const keyLight = new THREE.DirectionalLight(0xffffff, 1.5); // Brighter key light\n  keyLight.position.set(-100, 0, 100);\n  const fillLight = new THREE.DirectionalLight(0xffffff, 1.0); // Fill light to reduce shadows\n  fillLight.position.set(100, 0, 100);\n  const backLight = new THREE.DirectionalLight(0xffffff, 1.0); // Back light for rim effect\n  backLight.position.set(100, 0, -100).normalize();\n\n  // Hemisphere light for overall scene illumination and color vibrancy\n  const hemiLight = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.6);\n  hemiLight.color.setHSL(0.6, 1, 0.6);\n  hemiLight.groundColor.setHSL(0.095, 1, 0.75);\n  hemiLight.position.set(0, 50, 0);\n  scene.add(keyLight, fillLight, backLight, hemiLight);\n  const objLoader = new OBJLoader();\n  const textureLoader = new THREE.TextureLoader();\n\n  // Read the OBJ file\n  const objReader = new FileReader();\n  objReader.readAsDataURL(objFile);\n  objReader.onload = event => {\n    objLoader.load(event.target.result, obj => {\n      // Read the texture file\n      const textureReader = new FileReader();\n      textureReader.readAsDataURL(textureFile);\n      textureReader.onload = e => {\n        const texture = textureLoader.load(e.target.result);\n        obj.traverse(child => {\n          if (child instanceof THREE.Mesh) {\n            child.material.map = texture;\n            child.material.needsUpdate = true;\n\n            // Adjust material properties to avoid color fading\n            child.material.color.convertSRGBToLinear();\n            child.material.emissiveIntensity = 0.2;\n            child.material.emissive = new THREE.Color('grey').convertSRGBToLinear();\n          }\n        });\n        scene.add(obj);\n      };\n    });\n  };\n\n  // Animation loop\n  const animate = () => {\n    requestAnimationFrame(animate);\n    controls.update();\n    renderer.render(scene, camera);\n  };\n  animate();\n};","map":{"version":3,"names":["initThreeScene","scene","THREE","Scene","background","Color","width","viewerRef","current","clientWidth","height","clientHeight","camera","PerspectiveCamera","position","z","renderer","WebGLRenderer","antialias","outputEncoding","sRGBEncoding","setSize","appendChild","domElement","controls","OrbitControls","enableDamping","keyLight","DirectionalLight","set","fillLight","backLight","normalize","hemiLight","HemisphereLight","color","setHSL","groundColor","add","objLoader","OBJLoader","textureLoader","TextureLoader","objReader","FileReader","readAsDataURL","objFile","onload","event","load","target","result","obj","textureReader","textureFile","e","texture","traverse","child","Mesh","material","map","needsUpdate","convertSRGBToLinear","emissiveIntensity","emissive","animate","requestAnimationFrame","update","render"],"sources":["/Users/jasonlin/Desktop/fitzi2.0/src/App.js"],"sourcesContent":["const initThreeScene = () => {\n  const scene = new THREE.Scene();\n  scene.background = new THREE.Color(0x202020); // Set the background color to something dark\n\n  const width = viewerRef.current.clientWidth;\n  const height = viewerRef.current.clientHeight;\n  const camera = new THREE.PerspectiveCamera(50, width / height, 0.1, 1000);\n  camera.position.z = 5;\n\n  const renderer = new THREE.WebGLRenderer({ antialias: true });\n  renderer.outputEncoding = THREE.sRGBEncoding; // Ensure the renderer uses sRGB color space\n  renderer.setSize(width, height);\n  viewerRef.current.appendChild(renderer.domElement);\n\n  const controls = new OrbitControls(camera, renderer.domElement);\n  controls.enableDamping = true;\n\n  // Enhanced three-point lighting setup\n  const keyLight = new THREE.DirectionalLight(0xffffff, 1.5); // Brighter key light\n  keyLight.position.set(-100, 0, 100);\n\n  const fillLight = new THREE.DirectionalLight(0xffffff, 1.0); // Fill light to reduce shadows\n  fillLight.position.set(100, 0, 100);\n\n  const backLight = new THREE.DirectionalLight(0xffffff, 1.0); // Back light for rim effect\n  backLight.position.set(100, 0, -100).normalize();\n\n  // Hemisphere light for overall scene illumination and color vibrancy\n  const hemiLight = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.6);\n  hemiLight.color.setHSL(0.6, 1, 0.6);\n  hemiLight.groundColor.setHSL(0.095, 1, 0.75);\n  hemiLight.position.set(0, 50, 0);\n\n  scene.add(keyLight, fillLight, backLight, hemiLight);\n\n  const objLoader = new OBJLoader();\n  const textureLoader = new THREE.TextureLoader();\n\n  // Read the OBJ file\n  const objReader = new FileReader();\n  objReader.readAsDataURL(objFile);\n  objReader.onload = (event) => {\n    objLoader.load(event.target.result, (obj) => {\n      // Read the texture file\n      const textureReader = new FileReader();\n      textureReader.readAsDataURL(textureFile);\n      textureReader.onload = (e) => {\n        const texture = textureLoader.load(e.target.result);\n        obj.traverse((child) => {\n          if (child instanceof THREE.Mesh) {\n            child.material.map = texture;\n            child.material.needsUpdate = true;\n\n            // Adjust material properties to avoid color fading\n            child.material.color.convertSRGBToLinear();\n            child.material.emissiveIntensity = 0.2;\n            child.material.emissive = new THREE.Color('grey').convertSRGBToLinear();\n          }\n        });\n        scene.add(obj);\n      };\n    });\n  };\n\n  // Animation loop\n  const animate = () => {\n    requestAnimationFrame(animate);\n    controls.update();\n    renderer.render(scene, camera);\n  };\n\n  animate();\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}