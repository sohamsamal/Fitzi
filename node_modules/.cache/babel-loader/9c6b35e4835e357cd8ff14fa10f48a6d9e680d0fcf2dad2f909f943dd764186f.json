{"ast":null,"code":"import { DataTextureLoader, DataUtils, FloatType, HalfFloatType, LinearFilter, LinearSRGBColorSpace } from 'three';\n\n// https://github.com/mrdoob/three.js/issues/5552\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nclass RGBELoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n    this.type = HalfFloatType;\n  }\n\n  // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n  parse(buffer) {\n    const /* default error routine.  change this to change error handling */\n      rgbe_read_error = 1,\n      rgbe_write_error = 2,\n      rgbe_format_error = 3,\n      rgbe_memory_error = 4,\n      rgbe_error = function (rgbe_error_code, msg) {\n        switch (rgbe_error_code) {\n          case rgbe_read_error:\n            throw new Error('THREE.RGBELoader: Read Error: ' + (msg || ''));\n          case rgbe_write_error:\n            throw new Error('THREE.RGBELoader: Write Error: ' + (msg || ''));\n          case rgbe_format_error:\n            throw new Error('THREE.RGBELoader: Bad File Format: ' + (msg || ''));\n          default:\n          case rgbe_memory_error:\n            throw new Error('THREE.RGBELoader: Memory Error: ' + (msg || ''));\n        }\n      },\n      /* offsets to red, green, and blue components in a data (float) pixel */\n      //RGBE_DATA_RED = 0,\n      //RGBE_DATA_GREEN = 1,\n      //RGBE_DATA_BLUE = 2,\n\n      /* number of floats per pixel, use 4 since stored in rgba image format */\n      //RGBE_DATA_SIZE = 4,\n\n      /* flags indicating which fields in an rgbe_header_info are valid */\n      RGBE_VALID_PROGRAMTYPE = 1,\n      RGBE_VALID_FORMAT = 2,\n      RGBE_VALID_DIMENSIONS = 4,\n      NEWLINE = '\\n',\n      fgets = function (buffer, lineLimit, consume) {\n        const chunkSize = 128;\n        lineLimit = !lineLimit ? 1024 : lineLimit;\n        let p = buffer.pos,\n          i = -1,\n          len = 0,\n          s = '',\n          chunk = String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n        while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer.byteLength) {\n          s += chunk;\n          len += chunk.length;\n          p += chunkSize;\n          chunk += String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n        }\n        if (-1 < i) {\n          /*for (i=l-1; i>=0; i--) {\n          \tbyteCode = m.charCodeAt(i);\n          \tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n          \telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n          \tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n          }*/\n          if (false !== consume) buffer.pos += len + i + 1;\n          return s + chunk.slice(0, i);\n        }\n        return false;\n      },\n      /* minimal header reading.  modify if you want to parse more information */\n      RGBE_ReadHeader = function (buffer) {\n        // regexes to parse header info fields\n        const magic_token_re = /^#\\?(\\S+)/,\n          gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n          exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n          format_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n          dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n          // RGBE format header struct\n          header = {\n            valid: 0,\n            /* indicate which fields are valid */\n\n            string: '',\n            /* the actual header string */\n\n            comments: '',\n            /* comments found in header */\n\n            programtype: 'RGBE',\n            /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n\n            format: '',\n            /* RGBE format, default 32-bit_rle_rgbe */\n\n            gamma: 1.0,\n            /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n\n            exposure: 1.0,\n            /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n\n            width: 0,\n            height: 0 /* image dimensions, width/height */\n          };\n        let line, match;\n        if (buffer.pos >= buffer.byteLength || !(line = fgets(buffer))) {\n          rgbe_error(rgbe_read_error, 'no header found');\n        }\n\n        /* if you want to require the magic token then uncomment the next line */\n        if (!(match = line.match(magic_token_re))) {\n          rgbe_error(rgbe_format_error, 'bad initial token');\n        }\n        header.valid |= RGBE_VALID_PROGRAMTYPE;\n        header.programtype = match[1];\n        header.string += line + '\\n';\n        while (true) {\n          line = fgets(buffer);\n          if (false === line) break;\n          header.string += line + '\\n';\n          if ('#' === line.charAt(0)) {\n            header.comments += line + '\\n';\n            continue; // comment line\n          }\n          if (match = line.match(gamma_re)) {\n            header.gamma = parseFloat(match[1]);\n          }\n          if (match = line.match(exposure_re)) {\n            header.exposure = parseFloat(match[1]);\n          }\n          if (match = line.match(format_re)) {\n            header.valid |= RGBE_VALID_FORMAT;\n            header.format = match[1]; //'32-bit_rle_rgbe';\n          }\n          if (match = line.match(dimensions_re)) {\n            header.valid |= RGBE_VALID_DIMENSIONS;\n            header.height = parseInt(match[1], 10);\n            header.width = parseInt(match[2], 10);\n          }\n          if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS) break;\n        }\n        if (!(header.valid & RGBE_VALID_FORMAT)) {\n          rgbe_error(rgbe_format_error, 'missing format specifier');\n        }\n        if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\n          rgbe_error(rgbe_format_error, 'missing image size specifier');\n        }\n        return header;\n      },\n      RGBE_ReadPixels_RLE = function (buffer, w, h) {\n        const scanline_width = w;\n        if (\n        // run length encoding is not allowed so read flat\n        scanline_width < 8 || scanline_width > 0x7fff ||\n        // this file is not run length encoded\n        2 !== buffer[0] || 2 !== buffer[1] || buffer[2] & 0x80) {\n          // return the flat buffer\n          return new Uint8Array(buffer);\n        }\n        if (scanline_width !== (buffer[2] << 8 | buffer[3])) {\n          rgbe_error(rgbe_format_error, 'wrong scanline width');\n        }\n        const data_rgba = new Uint8Array(4 * w * h);\n        if (!data_rgba.length) {\n          rgbe_error(rgbe_memory_error, 'unable to allocate buffer space');\n        }\n        let offset = 0,\n          pos = 0;\n        const ptr_end = 4 * scanline_width;\n        const rgbeStart = new Uint8Array(4);\n        const scanline_buffer = new Uint8Array(ptr_end);\n        let num_scanlines = h;\n\n        // read in each successive scanline\n        while (num_scanlines > 0 && pos < buffer.byteLength) {\n          if (pos + 4 > buffer.byteLength) {\n            rgbe_error(rgbe_read_error);\n          }\n          rgbeStart[0] = buffer[pos++];\n          rgbeStart[1] = buffer[pos++];\n          rgbeStart[2] = buffer[pos++];\n          rgbeStart[3] = buffer[pos++];\n          if (2 != rgbeStart[0] || 2 != rgbeStart[1] || (rgbeStart[2] << 8 | rgbeStart[3]) != scanline_width) {\n            rgbe_error(rgbe_format_error, 'bad rgbe scanline format');\n          }\n\n          // read each of the four channels for the scanline into the buffer\n          // first red, then green, then blue, then exponent\n          let ptr = 0,\n            count;\n          while (ptr < ptr_end && pos < buffer.byteLength) {\n            count = buffer[pos++];\n            const isEncodedRun = count > 128;\n            if (isEncodedRun) count -= 128;\n            if (0 === count || ptr + count > ptr_end) {\n              rgbe_error(rgbe_format_error, 'bad scanline data');\n            }\n            if (isEncodedRun) {\n              // a (encoded) run of the same value\n              const byteValue = buffer[pos++];\n              for (let i = 0; i < count; i++) {\n                scanline_buffer[ptr++] = byteValue;\n              }\n              //ptr += count;\n            } else {\n              // a literal-run\n              scanline_buffer.set(buffer.subarray(pos, pos + count), ptr);\n              ptr += count;\n              pos += count;\n            }\n          }\n\n          // now convert data from buffer into rgba\n          // first red, then green, then blue, then exponent (alpha)\n          const l = scanline_width; //scanline_buffer.byteLength;\n          for (let i = 0; i < l; i++) {\n            let off = 0;\n            data_rgba[offset] = scanline_buffer[i + off];\n            off += scanline_width; //1;\n            data_rgba[offset + 1] = scanline_buffer[i + off];\n            off += scanline_width; //1;\n            data_rgba[offset + 2] = scanline_buffer[i + off];\n            off += scanline_width; //1;\n            data_rgba[offset + 3] = scanline_buffer[i + off];\n            offset += 4;\n          }\n          num_scanlines--;\n        }\n        return data_rgba;\n      };\n    const RGBEByteToRGBFloat = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2.0, e - 128.0) / 255.0;\n      destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale;\n      destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale;\n      destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale;\n      destArray[destOffset + 3] = 1;\n    };\n    const RGBEByteToRGBHalf = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2.0, e - 128.0) / 255.0;\n\n      // clamping to 65504, the maximum representable value in float16\n      destArray[destOffset + 0] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 0] * scale, 65504));\n      destArray[destOffset + 1] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 1] * scale, 65504));\n      destArray[destOffset + 2] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 2] * scale, 65504));\n      destArray[destOffset + 3] = DataUtils.toHalfFloat(1);\n    };\n    const byteArray = new Uint8Array(buffer);\n    byteArray.pos = 0;\n    const rgbe_header_info = RGBE_ReadHeader(byteArray);\n    const w = rgbe_header_info.width,\n      h = rgbe_header_info.height,\n      image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h);\n    let data, type;\n    let numElements;\n    switch (this.type) {\n      case FloatType:\n        numElements = image_rgba_data.length / 4;\n        const floatArray = new Float32Array(numElements * 4);\n        for (let j = 0; j < numElements; j++) {\n          RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 4);\n        }\n        data = floatArray;\n        type = FloatType;\n        break;\n      case HalfFloatType:\n        numElements = image_rgba_data.length / 4;\n        const halfArray = new Uint16Array(numElements * 4);\n        for (let j = 0; j < numElements; j++) {\n          RGBEByteToRGBHalf(image_rgba_data, j * 4, halfArray, j * 4);\n        }\n        data = halfArray;\n        type = HalfFloatType;\n        break;\n      default:\n        throw new Error('THREE.RGBELoader: Unsupported type: ' + this.type);\n        break;\n    }\n    return {\n      width: w,\n      height: h,\n      data: data,\n      header: rgbe_header_info.string,\n      gamma: rgbe_header_info.gamma,\n      exposure: rgbe_header_info.exposure,\n      type: type\n    };\n  }\n  setDataType(value) {\n    this.type = value;\n    return this;\n  }\n  load(url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      switch (texture.type) {\n        case FloatType:\n        case HalfFloatType:\n          texture.colorSpace = LinearSRGBColorSpace;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n      }\n      if (onLoad) onLoad(texture, texData);\n    }\n    return super.load(url, onLoadCallback, onProgress, onError);\n  }\n}\nexport { RGBELoader };","map":{"version":3,"names":["DataTextureLoader","DataUtils","FloatType","HalfFloatType","LinearFilter","LinearSRGBColorSpace","RGBELoader","constructor","manager","type","parse","buffer","rgbe_read_error","rgbe_write_error","rgbe_format_error","rgbe_memory_error","rgbe_error","rgbe_error_code","msg","Error","RGBE_VALID_PROGRAMTYPE","RGBE_VALID_FORMAT","RGBE_VALID_DIMENSIONS","NEWLINE","fgets","lineLimit","consume","chunkSize","p","pos","i","len","s","chunk","String","fromCharCode","apply","Uint16Array","subarray","indexOf","byteLength","length","slice","RGBE_ReadHeader","magic_token_re","gamma_re","exposure_re","format_re","dimensions_re","header","valid","string","comments","programtype","format","gamma","exposure","width","height","line","match","charAt","parseFloat","parseInt","RGBE_ReadPixels_RLE","w","h","scanline_width","Uint8Array","data_rgba","offset","ptr_end","rgbeStart","scanline_buffer","num_scanlines","ptr","count","isEncodedRun","byteValue","set","l","off","RGBEByteToRGBFloat","sourceArray","sourceOffset","destArray","destOffset","e","scale","Math","pow","RGBEByteToRGBHalf","toHalfFloat","min","byteArray","rgbe_header_info","image_rgba_data","data","numElements","floatArray","Float32Array","j","halfArray","setDataType","value","load","url","onLoad","onProgress","onError","onLoadCallback","texture","texData","colorSpace","minFilter","magFilter","generateMipmaps","flipY"],"sources":["/Users/jasonlin/Desktop/fitzi2.0/node_modules/three/examples/jsm/loaders/RGBELoader.js"],"sourcesContent":["import {\n\tDataTextureLoader,\n\tDataUtils,\n\tFloatType,\n\tHalfFloatType,\n\tLinearFilter,\n\tLinearSRGBColorSpace\n} from 'three';\n\n// https://github.com/mrdoob/three.js/issues/5552\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nclass RGBELoader extends DataTextureLoader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.type = HalfFloatType;\n\n\t}\n\n\t// adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\tparse( buffer ) {\n\n\t\tconst\n\t\t\t/* default error routine.  change this to change error handling */\n\t\t\trgbe_read_error = 1,\n\t\t\trgbe_write_error = 2,\n\t\t\trgbe_format_error = 3,\n\t\t\trgbe_memory_error = 4,\n\t\t\trgbe_error = function ( rgbe_error_code, msg ) {\n\n\t\t\t\tswitch ( rgbe_error_code ) {\n\n\t\t\t\t\tcase rgbe_read_error: throw new Error( 'THREE.RGBELoader: Read Error: ' + ( msg || '' ) );\n\t\t\t\t\tcase rgbe_write_error: throw new Error( 'THREE.RGBELoader: Write Error: ' + ( msg || '' ) );\n\t\t\t\t\tcase rgbe_format_error: throw new Error( 'THREE.RGBELoader: Bad File Format: ' + ( msg || '' ) );\n\t\t\t\t\tdefault:\n\t\t\t\t\tcase rgbe_memory_error: throw new Error( 'THREE.RGBELoader: Memory Error: ' + ( msg || '' ) );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\t/* offsets to red, green, and blue components in a data (float) pixel */\n\t\t\t//RGBE_DATA_RED = 0,\n\t\t\t//RGBE_DATA_GREEN = 1,\n\t\t\t//RGBE_DATA_BLUE = 2,\n\n\t\t\t/* number of floats per pixel, use 4 since stored in rgba image format */\n\t\t\t//RGBE_DATA_SIZE = 4,\n\n\t\t\t/* flags indicating which fields in an rgbe_header_info are valid */\n\t\t\tRGBE_VALID_PROGRAMTYPE = 1,\n\t\t\tRGBE_VALID_FORMAT = 2,\n\t\t\tRGBE_VALID_DIMENSIONS = 4,\n\n\t\t\tNEWLINE = '\\n',\n\n\t\t\tfgets = function ( buffer, lineLimit, consume ) {\n\n\t\t\t\tconst chunkSize = 128;\n\n\t\t\t\tlineLimit = ! lineLimit ? 1024 : lineLimit;\n\t\t\t\tlet p = buffer.pos,\n\t\t\t\t\ti = - 1, len = 0, s = '',\n\t\t\t\t\tchunk = String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\twhile ( ( 0 > ( i = chunk.indexOf( NEWLINE ) ) ) && ( len < lineLimit ) && ( p < buffer.byteLength ) ) {\n\n\t\t\t\t\ts += chunk; len += chunk.length;\n\t\t\t\t\tp += chunkSize;\n\t\t\t\t\tchunk += String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( - 1 < i ) {\n\n\t\t\t\t\t/*for (i=l-1; i>=0; i--) {\n\t\t\t\t\t\tbyteCode = m.charCodeAt(i);\n\t\t\t\t\t\tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n\t\t\t\t\t\telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n\t\t\t\t\t\tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n\t\t\t\t\t}*/\n\t\t\t\t\tif ( false !== consume ) buffer.pos += len + i + 1;\n\t\t\t\t\treturn s + chunk.slice( 0, i );\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t},\n\n\t\t\t/* minimal header reading.  modify if you want to parse more information */\n\t\t\tRGBE_ReadHeader = function ( buffer ) {\n\n\n\t\t\t\t// regexes to parse header info fields\n\t\t\t\tconst magic_token_re = /^#\\?(\\S+)/,\n\t\t\t\t\tgamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\texposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\tformat_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n\t\t\t\t\tdimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n\n\t\t\t\t\t// RGBE format header struct\n\t\t\t\t\theader = {\n\n\t\t\t\t\t\tvalid: 0, /* indicate which fields are valid */\n\n\t\t\t\t\t\tstring: '', /* the actual header string */\n\n\t\t\t\t\t\tcomments: '', /* comments found in header */\n\n\t\t\t\t\t\tprogramtype: 'RGBE', /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n\n\t\t\t\t\t\tformat: '', /* RGBE format, default 32-bit_rle_rgbe */\n\n\t\t\t\t\t\tgamma: 1.0, /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n\n\t\t\t\t\t\texposure: 1.0, /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n\n\t\t\t\t\t\twidth: 0, height: 0 /* image dimensions, width/height */\n\n\t\t\t\t\t};\n\n\t\t\t\tlet line, match;\n\n\t\t\t\tif ( buffer.pos >= buffer.byteLength || ! ( line = fgets( buffer ) ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_read_error, 'no header found' );\n\n\t\t\t\t}\n\n\t\t\t\t/* if you want to require the magic token then uncomment the next line */\n\t\t\t\tif ( ! ( match = line.match( magic_token_re ) ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_format_error, 'bad initial token' );\n\n\t\t\t\t}\n\n\t\t\t\theader.valid |= RGBE_VALID_PROGRAMTYPE;\n\t\t\t\theader.programtype = match[ 1 ];\n\t\t\t\theader.string += line + '\\n';\n\n\t\t\t\twhile ( true ) {\n\n\t\t\t\t\tline = fgets( buffer );\n\t\t\t\t\tif ( false === line ) break;\n\t\t\t\t\theader.string += line + '\\n';\n\n\t\t\t\t\tif ( '#' === line.charAt( 0 ) ) {\n\n\t\t\t\t\t\theader.comments += line + '\\n';\n\t\t\t\t\t\tcontinue; // comment line\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( gamma_re ) ) {\n\n\t\t\t\t\t\theader.gamma = parseFloat( match[ 1 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( exposure_re ) ) {\n\n\t\t\t\t\t\theader.exposure = parseFloat( match[ 1 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( format_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_FORMAT;\n\t\t\t\t\t\theader.format = match[ 1 ];//'32-bit_rle_rgbe';\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( dimensions_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_DIMENSIONS;\n\t\t\t\t\t\theader.height = parseInt( match[ 1 ], 10 );\n\t\t\t\t\t\theader.width = parseInt( match[ 2 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( header.valid & RGBE_VALID_FORMAT ) && ( header.valid & RGBE_VALID_DIMENSIONS ) ) break;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_FORMAT ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_format_error, 'missing format specifier' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_DIMENSIONS ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_format_error, 'missing image size specifier' );\n\n\t\t\t\t}\n\n\t\t\t\treturn header;\n\n\t\t\t},\n\n\t\t\tRGBE_ReadPixels_RLE = function ( buffer, w, h ) {\n\n\t\t\t\tconst scanline_width = w;\n\n\t\t\t\tif (\n\t\t\t\t\t// run length encoding is not allowed so read flat\n\t\t\t\t\t( ( scanline_width < 8 ) || ( scanline_width > 0x7fff ) ) ||\n\t\t\t\t\t// this file is not run length encoded\n\t\t\t\t\t( ( 2 !== buffer[ 0 ] ) || ( 2 !== buffer[ 1 ] ) || ( buffer[ 2 ] & 0x80 ) )\n\t\t\t\t) {\n\n\t\t\t\t\t// return the flat buffer\n\t\t\t\t\treturn new Uint8Array( buffer );\n\n\t\t\t\t}\n\n\t\t\t\tif ( scanline_width !== ( ( buffer[ 2 ] << 8 ) | buffer[ 3 ] ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_format_error, 'wrong scanline width' );\n\n\t\t\t\t}\n\n\t\t\t\tconst data_rgba = new Uint8Array( 4 * w * h );\n\n\t\t\t\tif ( ! data_rgba.length ) {\n\n\t\t\t\t\trgbe_error( rgbe_memory_error, 'unable to allocate buffer space' );\n\n\t\t\t\t}\n\n\t\t\t\tlet offset = 0, pos = 0;\n\n\t\t\t\tconst ptr_end = 4 * scanline_width;\n\t\t\t\tconst rgbeStart = new Uint8Array( 4 );\n\t\t\t\tconst scanline_buffer = new Uint8Array( ptr_end );\n\t\t\t\tlet num_scanlines = h;\n\n\t\t\t\t// read in each successive scanline\n\t\t\t\twhile ( ( num_scanlines > 0 ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\tif ( pos + 4 > buffer.byteLength ) {\n\n\t\t\t\t\t\trgbe_error( rgbe_read_error );\n\n\t\t\t\t\t}\n\n\t\t\t\t\trgbeStart[ 0 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 1 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 2 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 3 ] = buffer[ pos ++ ];\n\n\t\t\t\t\tif ( ( 2 != rgbeStart[ 0 ] ) || ( 2 != rgbeStart[ 1 ] ) || ( ( ( rgbeStart[ 2 ] << 8 ) | rgbeStart[ 3 ] ) != scanline_width ) ) {\n\n\t\t\t\t\t\trgbe_error( rgbe_format_error, 'bad rgbe scanline format' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// read each of the four channels for the scanline into the buffer\n\t\t\t\t\t// first red, then green, then blue, then exponent\n\t\t\t\t\tlet ptr = 0, count;\n\n\t\t\t\t\twhile ( ( ptr < ptr_end ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\t\tcount = buffer[ pos ++ ];\n\t\t\t\t\t\tconst isEncodedRun = count > 128;\n\t\t\t\t\t\tif ( isEncodedRun ) count -= 128;\n\n\t\t\t\t\t\tif ( ( 0 === count ) || ( ptr + count > ptr_end ) ) {\n\n\t\t\t\t\t\t\trgbe_error( rgbe_format_error, 'bad scanline data' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( isEncodedRun ) {\n\n\t\t\t\t\t\t\t// a (encoded) run of the same value\n\t\t\t\t\t\t\tconst byteValue = buffer[ pos ++ ];\n\t\t\t\t\t\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\t\t\tscanline_buffer[ ptr ++ ] = byteValue;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//ptr += count;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// a literal-run\n\t\t\t\t\t\t\tscanline_buffer.set( buffer.subarray( pos, pos + count ), ptr );\n\t\t\t\t\t\t\tptr += count; pos += count;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\t// now convert data from buffer into rgba\n\t\t\t\t\t// first red, then green, then blue, then exponent (alpha)\n\t\t\t\t\tconst l = scanline_width; //scanline_buffer.byteLength;\n\t\t\t\t\tfor ( let i = 0; i < l; i ++ ) {\n\n\t\t\t\t\t\tlet off = 0;\n\t\t\t\t\t\tdata_rgba[ offset ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 1 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 2 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 3 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnum_scanlines --;\n\n\t\t\t\t}\n\n\t\t\t\treturn data_rgba;\n\n\t\t\t};\n\n\t\tconst RGBEByteToRGBFloat = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tconst e = sourceArray[ sourceOffset + 3 ];\n\t\t\tconst scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\tdestArray[ destOffset + 0 ] = sourceArray[ sourceOffset + 0 ] * scale;\n\t\t\tdestArray[ destOffset + 1 ] = sourceArray[ sourceOffset + 1 ] * scale;\n\t\t\tdestArray[ destOffset + 2 ] = sourceArray[ sourceOffset + 2 ] * scale;\n\t\t\tdestArray[ destOffset + 3 ] = 1;\n\n\t\t};\n\n\t\tconst RGBEByteToRGBHalf = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tconst e = sourceArray[ sourceOffset + 3 ];\n\t\t\tconst scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\t// clamping to 65504, the maximum representable value in float16\n\t\t\tdestArray[ destOffset + 0 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 0 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 1 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 1 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 2 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 2 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 3 ] = DataUtils.toHalfFloat( 1 );\n\n\t\t};\n\n\t\tconst byteArray = new Uint8Array( buffer );\n\t\tbyteArray.pos = 0;\n\t\tconst rgbe_header_info = RGBE_ReadHeader( byteArray );\n\n\t\tconst w = rgbe_header_info.width,\n\t\t\th = rgbe_header_info.height,\n\t\t\timage_rgba_data = RGBE_ReadPixels_RLE( byteArray.subarray( byteArray.pos ), w, h );\n\n\n\t\tlet data, type;\n\t\tlet numElements;\n\n\t\tswitch ( this.type ) {\n\n\t\t\tcase FloatType:\n\n\t\t\t\tnumElements = image_rgba_data.length / 4;\n\t\t\t\tconst floatArray = new Float32Array( numElements * 4 );\n\n\t\t\t\tfor ( let j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\tRGBEByteToRGBFloat( image_rgba_data, j * 4, floatArray, j * 4 );\n\n\t\t\t\t}\n\n\t\t\t\tdata = floatArray;\n\t\t\t\ttype = FloatType;\n\t\t\t\tbreak;\n\n\t\t\tcase HalfFloatType:\n\n\t\t\t\tnumElements = image_rgba_data.length / 4;\n\t\t\t\tconst halfArray = new Uint16Array( numElements * 4 );\n\n\t\t\t\tfor ( let j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\tRGBEByteToRGBHalf( image_rgba_data, j * 4, halfArray, j * 4 );\n\n\t\t\t\t}\n\n\t\t\t\tdata = halfArray;\n\t\t\t\ttype = HalfFloatType;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tthrow new Error( 'THREE.RGBELoader: Unsupported type: ' + this.type );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\treturn {\n\t\t\twidth: w, height: h,\n\t\t\tdata: data,\n\t\t\theader: rgbe_header_info.string,\n\t\t\tgamma: rgbe_header_info.gamma,\n\t\t\texposure: rgbe_header_info.exposure,\n\t\t\ttype: type\n\t\t};\n\n\t}\n\n\tsetDataType( value ) {\n\n\t\tthis.type = value;\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tfunction onLoadCallback( texture, texData ) {\n\n\t\t\tswitch ( texture.type ) {\n\n\t\t\t\tcase FloatType:\n\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\ttexture.colorSpace = LinearSRGBColorSpace;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}\n\n\t\treturn super.load( url, onLoadCallback, onProgress, onError );\n\n\t}\n\n}\n\nexport { RGBELoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}