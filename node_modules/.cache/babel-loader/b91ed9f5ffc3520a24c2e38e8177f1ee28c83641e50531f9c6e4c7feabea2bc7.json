{"ast":null,"code":"var _jsxFileName = \"/Users/jasonlin/Desktop/fitzi2.0/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OBJViewerTest = () => {\n  _s();\n  const [objFile, setObjFile] = useState(null);\n  const [textureFile, setTextureFile] = useState(null);\n  const viewerRef = useRef(null);\n  useEffect(() => {\n    if (objFile && textureFile) {\n      initThreeScene();\n    }\n  }, [objFile, textureFile]);\n  const handleObjFileChange = event => {\n    const file = event.target.files[0];\n    if (file) {\n      setObjFile(file);\n    }\n  };\n  const handleTextureFileChange = event => {\n    const file = event.target.files[0];\n    if (file) {\n      setTextureFile(file);\n    }\n  };\n  const initThreeScene = () => {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x202020);\n    const width = viewerRef.current.clientWidth;\n    const height = viewerRef.current.clientHeight;\n    const camera = new THREE.PerspectiveCamera(50, width / height, 0.1, 1000);\n    camera.position.z = 5;\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.outputEncoding = THREE.sRGBEncoding; // Use sRGB color space for accurate colors\n    renderer.setSize(width, height);\n    viewerRef.current.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n\n    // Brighten up the lighting\n    const keyLight = new THREE.DirectionalLight(0xffffff, 1.5); // Stronger key light for vibrancy\n    keyLight.position.set(-100, 0, 100);\n    const fillLight = new THREE.DirectionalLight(0xffffff, 1.0); // Strong fill light\n    fillLight.position.set(100, 0, 100);\n    const backLight = new THREE.DirectionalLight(0xffffff, 1.0); // Back light for depth\n    backLight.position.set(100, 0, -100).normalize();\n    scene.add(keyLight, fillLight, backLight);\n    const objLoader = new OBJLoader();\n    const textureLoader = new THREE.TextureLoader();\n\n    // Read the OBJ file\n    const objReader = new FileReader();\n    objReader.readAsDataURL(objFile);\n    objReader.onload = event => {\n      objLoader.load(event.target.result, obj => {\n        // Read the texture file\n        const textureReader = new FileReader();\n        textureReader.readAsDataURL(textureFile);\n        textureReader.onload = e => {\n          const texture = textureLoader.load(e.target.result);\n          texture.encoding = THREE.sRGBEncoding; // Ensure the texture uses sRGB encoding\n          obj.traverse(child => {\n            if (child instanceof THREE.Mesh) {\n              child.material.map = texture;\n\n              // Make sure the color is not washed out\n              child.material.color.convertSRGBToLinear();\n              child.material.emissive = new THREE.Color(0x000000);\n              child.material.emissiveIntensity = 0.1;\n              child.material.emissiveMap = texture;\n              child.material.emissiveMap.encoding = THREE.sRGBEncoding;\n            }\n          });\n          scene.add(obj);\n        };\n      });\n    };\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleObjFileChange,\n      accept: \".obj\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleTextureFileChange,\n      accept: \"image/*\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: viewerRef,\n      style: {\n        width: '100vw',\n        height: '100vh'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(OBJViewerTest, \"xyiIFRbj6Yc1WKDnmCI3B4vc78g=\");\n_c = OBJViewerTest;\nexport default OBJViewerTest;\nvar _c;\n$RefreshReg$(_c, \"OBJViewerTest\");","map":{"version":3,"names":["React","useState","useEffect","useRef","THREE","OBJLoader","OrbitControls","jsxDEV","_jsxDEV","OBJViewerTest","_s","objFile","setObjFile","textureFile","setTextureFile","viewerRef","initThreeScene","handleObjFileChange","event","file","target","files","handleTextureFileChange","scene","Scene","background","Color","width","current","clientWidth","height","clientHeight","camera","PerspectiveCamera","position","z","renderer","WebGLRenderer","antialias","outputEncoding","sRGBEncoding","setSize","appendChild","domElement","controls","enableDamping","keyLight","DirectionalLight","set","fillLight","backLight","normalize","add","objLoader","textureLoader","TextureLoader","objReader","FileReader","readAsDataURL","onload","load","result","obj","textureReader","e","texture","encoding","traverse","child","Mesh","material","map","color","convertSRGBToLinear","emissive","emissiveIntensity","emissiveMap","animate","requestAnimationFrame","update","render","children","type","onChange","accept","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","_c","$RefreshReg$"],"sources":["/Users/jasonlin/Desktop/fitzi2.0/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\nconst OBJViewerTest = () => {\n  const [objFile, setObjFile] = useState(null);\n  const [textureFile, setTextureFile] = useState(null);\n  const viewerRef = useRef(null);\n\n  useEffect(() => {\n    if (objFile && textureFile) {\n      initThreeScene();\n    }\n  }, [objFile, textureFile]);\n\n  const handleObjFileChange = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      setObjFile(file);\n    }\n  };\n\n  const handleTextureFileChange = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      setTextureFile(file);\n    }\n  };\n\n  const initThreeScene = () => {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x202020);\n  \n    const width = viewerRef.current.clientWidth;\n    const height = viewerRef.current.clientHeight;\n    const camera = new THREE.PerspectiveCamera(50, width / height, 0.1, 1000);\n    camera.position.z = 5;\n  \n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.outputEncoding = THREE.sRGBEncoding; // Use sRGB color space for accurate colors\n    renderer.setSize(width, height);\n    viewerRef.current.appendChild(renderer.domElement);\n  \n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n  \n    // Brighten up the lighting\n    const keyLight = new THREE.DirectionalLight(0xffffff, 1.5); // Stronger key light for vibrancy\n    keyLight.position.set(-100, 0, 100);\n  \n    const fillLight = new THREE.DirectionalLight(0xffffff, 1.0); // Strong fill light\n    fillLight.position.set(100, 0, 100);\n  \n    const backLight = new THREE.DirectionalLight(0xffffff, 1.0); // Back light for depth\n    backLight.position.set(100, 0, -100).normalize();\n  \n    scene.add(keyLight, fillLight, backLight);\n  \n    const objLoader = new OBJLoader();\n    const textureLoader = new THREE.TextureLoader();\n  \n    // Read the OBJ file\n    const objReader = new FileReader();\n    objReader.readAsDataURL(objFile);\n    objReader.onload = (event) => {\n      objLoader.load(event.target.result, (obj) => {\n        // Read the texture file\n        const textureReader = new FileReader();\n        textureReader.readAsDataURL(textureFile);\n        textureReader.onload = (e) => {\n          const texture = textureLoader.load(e.target.result);\n          texture.encoding = THREE.sRGBEncoding; // Ensure the texture uses sRGB encoding\n          obj.traverse((child) => {\n            if (child instanceof THREE.Mesh) {\n              child.material.map = texture;\n  \n              // Make sure the color is not washed out\n              child.material.color.convertSRGBToLinear();\n              child.material.emissive = new THREE.Color(0x000000);\n              child.material.emissiveIntensity = 0.1;\n              child.material.emissiveMap = texture;\n              child.material.emissiveMap.encoding = THREE.sRGBEncoding;\n            }\n          });\n          scene.add(obj);\n        };\n      });\n    };\n  \n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    };\n  \n    animate();\n  };\n  \n\n  return (\n    <div>\n      <input type=\"file\" onChange={handleObjFileChange} accept=\".obj\" />\n      <input type=\"file\" onChange={handleTextureFileChange} accept=\"image/*\" />\n      <div ref={viewerRef} style={{ width: '100vw', height: '100vh' }}></div>\n    </div>\n  );\n};\n\nexport default OBJViewerTest;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}