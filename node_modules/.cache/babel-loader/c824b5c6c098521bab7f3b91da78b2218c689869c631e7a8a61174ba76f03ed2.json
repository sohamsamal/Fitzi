{"ast":null,"code":"var _jsxFileName = \"/Users/ssamal/Desktop/my-meshcapade-app/src/MeshcapadeViewer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MeshcapadeViewer = ({\n  photo\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    if (!photo) {\n      return;\n    }\n\n    // Define async function to fetch 3D model data\n    const fetchModel = async () => {\n      try {\n        // Replace `API_ENDPOINT` with the actual Meshcapade API endpoint\n        // `photo` should be the photo data or a reference to the photo\n        // This example assumes the API takes a form data with the photo\n        const formData = new FormData();\n        formData.append(\"photo\", photo);\n        const response = await axios.post('eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJuSnVpYzVwbXk1T1hGSjVmY1RIQTdUNVktRHZVbVVOR2xxVHBqS0hDVnU4In0.eyJleHAiOjE3MDg2Njg1MzIsImlhdCI6MTcwODYzMjUzNCwiYXV0aF90aW1lIjoxNzA4NjMyNTMyLCJqdGkiOiJjNjhlMzA4ZS04OTM4LTRjNmMtYmM1My05OTM5MzFhZmU4ZmIiLCJpc3MiOiJodHRwczovL2F1dGgubWVzaGNhcGFkZS5jb20vcmVhbG1zL21lc2hjYXBhZGUtbWUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiNmIwNzcwMmYtZDNmOS00YmJlLWJkZWYtNGYyYTU5ZjMzMWQwIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoibWVzaGNhcGFkZS1tZSIsIm5vbmNlIjoiZmJlY2RhODQtMDUwOC00MTkxLWI0ZmQtMDZjNTEyZGFhOTY0Iiwic2Vzc2lvbl9zdGF0ZSI6IjEwMWNkNzhiLTZiZTktNDllNi1hOGU0LWZhOTNiMDQ0MzM3NyIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9tZXNoY2FwYWRlLmNvbSIsImh0dHBzOi8vbWUubWVzaGNhcGFkZS5jb20iLCJodHRwczovL21lc2hjYXBhZGUubWUiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwiZGVmYXVsdC1yb2xlcy1nY21jIiwidW1hX2F1dGhvcml6YXRpb24iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIiwic2lkIjoiMTAxY2Q3OGItNmJlOS00OWU2LWE4ZTQtZmE5M2IwNDQzMzc3IiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJuYW1lIjoiRml0emkgU3RhcnR1cCIsInByZWZlcnJlZF91c2VybmFtZSI6ImZpdHppLnN0YXJ0dXBAZ21haWwuY29tIiwiZ2l2ZW5fbmFtZSI6IkZpdHppIiwiZmFtaWx5X25hbWUiOiJTdGFydHVwIiwicGljdHVyZSI6Imh0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS9hL0FDZzhvY0tJVjd4c202ZHRKSTV3SVNXbzBHV2pzTUpvMDdZWm80Sm5YdmozWENRbT1zOTYtYyIsImVtYWlsIjoiZml0emkuc3RhcnR1cEBnbWFpbC5jb20ifQ.kBvnHgNaV-NAQgpUS7N97A-Q0UoPe7yu6tq-QbO4LVTGeI7Urkp2NllBEmV950EzJBHtz5Oe9gVd6LLitOciP1n_YmEbiuRT7uVhbIU8bGL5PKinpcAH1kMwDsc6yxDm8lVWN1Wx8OE_v8ydgR29tzGfKBPDOCavBW0xiLuMKb1DX0BLsQWmrkSpqANjkufnXq5gPRW36lWSytEw_1new8NAEOYrPiZK9yBv-waqiicNA32pPL11-HwyNtsGtdK5rQUkHnBlACW4ScROW6Hz6HhaN3rFEwAnCXUHuMpxI_1yh_cDiBWKenAoA0pgwnBaNszbU2jwVihTWGW20g2v2w', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n            // Include any necessary authentication headers\n          }\n        });\n\n        // Assuming the response contains the URL to the 3D model\n        const modelUrl = response.data.modelUrl;\n\n        // Initialize Three.js scene\n        const scene = new THREE.Scene();\n        const camera = new THREE.PerspectiveCamera(75, mountRef.current.clientWidth / mountRef.current.clientHeight, 0.1, 1000);\n        const renderer = new THREE.WebGLRenderer();\n        renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n        mountRef.current.appendChild(renderer.domElement);\n\n        // Load the 3D model; this will vary depending on the format of the model (e.g., GLTF)\n        // For this example, let's assume it's a GLTF model\n        const loader = new THREE.GLTFLoader();\n        loader.load(modelUrl, gltf => {\n          scene.add(gltf.scene);\n          camera.position.z = 5; // Adjust camera position as needed\n          animate();\n        });\n\n        // Animation loop\n        const animate = () => {\n          requestAnimationFrame(animate);\n          // Add any rotation or animation to the model here\n          renderer.render(scene, camera);\n        };\n      } catch (error) {\n        console.error(\"Error fetching 3D model from Meshcapade:\", error);\n      }\n    };\n    fetchModel();\n    // Cleanup Three.js resources when component unmounts\n    return () => {\n      if (mountRef.current) {\n        mountRef.current.innerHTML = '';\n      }\n    };\n  }, [photo]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      width: '100%',\n      height: '400px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 10\n  }, this);\n};\n_s(MeshcapadeViewer, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = MeshcapadeViewer;\nexport default MeshcapadeViewer;\nvar _c;\n$RefreshReg$(_c, \"MeshcapadeViewer\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","axios","jsxDEV","_jsxDEV","MeshcapadeViewer","photo","_s","mountRef","fetchModel","formData","FormData","append","response","post","headers","modelUrl","data","scene","Scene","camera","PerspectiveCamera","current","clientWidth","clientHeight","renderer","WebGLRenderer","setSize","appendChild","domElement","loader","GLTFLoader","load","gltf","add","position","z","animate","requestAnimationFrame","render","error","console","innerHTML","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ssamal/Desktop/my-meshcapade-app/src/MeshcapadeViewer.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport axios from 'axios';\n\nconst MeshcapadeViewer = ({ photo }) => {\n  const mountRef = useRef(null);\n\n  useEffect(() => {\n    if (!photo) {\n      return;\n    }\n\n    // Define async function to fetch 3D model data\n    const fetchModel = async () => {\n      try {\n        // Replace `API_ENDPOINT` with the actual Meshcapade API endpoint\n        // `photo` should be the photo data or a reference to the photo\n        // This example assumes the API takes a form data with the photo\n        const formData = new FormData();\n        formData.append(\"photo\", photo);\n\n        const response = await axios.post('eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJuSnVpYzVwbXk1T1hGSjVmY1RIQTdUNVktRHZVbVVOR2xxVHBqS0hDVnU4In0.eyJleHAiOjE3MDg2Njg1MzIsImlhdCI6MTcwODYzMjUzNCwiYXV0aF90aW1lIjoxNzA4NjMyNTMyLCJqdGkiOiJjNjhlMzA4ZS04OTM4LTRjNmMtYmM1My05OTM5MzFhZmU4ZmIiLCJpc3MiOiJodHRwczovL2F1dGgubWVzaGNhcGFkZS5jb20vcmVhbG1zL21lc2hjYXBhZGUtbWUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiNmIwNzcwMmYtZDNmOS00YmJlLWJkZWYtNGYyYTU5ZjMzMWQwIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoibWVzaGNhcGFkZS1tZSIsIm5vbmNlIjoiZmJlY2RhODQtMDUwOC00MTkxLWI0ZmQtMDZjNTEyZGFhOTY0Iiwic2Vzc2lvbl9zdGF0ZSI6IjEwMWNkNzhiLTZiZTktNDllNi1hOGU0LWZhOTNiMDQ0MzM3NyIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9tZXNoY2FwYWRlLmNvbSIsImh0dHBzOi8vbWUubWVzaGNhcGFkZS5jb20iLCJodHRwczovL21lc2hjYXBhZGUubWUiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwiZGVmYXVsdC1yb2xlcy1nY21jIiwidW1hX2F1dGhvcml6YXRpb24iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIiwic2lkIjoiMTAxY2Q3OGItNmJlOS00OWU2LWE4ZTQtZmE5M2IwNDQzMzc3IiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJuYW1lIjoiRml0emkgU3RhcnR1cCIsInByZWZlcnJlZF91c2VybmFtZSI6ImZpdHppLnN0YXJ0dXBAZ21haWwuY29tIiwiZ2l2ZW5fbmFtZSI6IkZpdHppIiwiZmFtaWx5X25hbWUiOiJTdGFydHVwIiwicGljdHVyZSI6Imh0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS9hL0FDZzhvY0tJVjd4c202ZHRKSTV3SVNXbzBHV2pzTUpvMDdZWm80Sm5YdmozWENRbT1zOTYtYyIsImVtYWlsIjoiZml0emkuc3RhcnR1cEBnbWFpbC5jb20ifQ.kBvnHgNaV-NAQgpUS7N97A-Q0UoPe7yu6tq-QbO4LVTGeI7Urkp2NllBEmV950EzJBHtz5Oe9gVd6LLitOciP1n_YmEbiuRT7uVhbIU8bGL5PKinpcAH1kMwDsc6yxDm8lVWN1Wx8OE_v8ydgR29tzGfKBPDOCavBW0xiLuMKb1DX0BLsQWmrkSpqANjkufnXq5gPRW36lWSytEw_1new8NAEOYrPiZK9yBv-waqiicNA32pPL11-HwyNtsGtdK5rQUkHnBlACW4ScROW6Hz6HhaN3rFEwAnCXUHuMpxI_1yh_cDiBWKenAoA0pgwnBaNszbU2jwVihTWGW20g2v2w', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n            // Include any necessary authentication headers\n          },\n        });\n\n        // Assuming the response contains the URL to the 3D model\n        const modelUrl = response.data.modelUrl;\n\n        // Initialize Three.js scene\n        const scene = new THREE.Scene();\n        const camera = new THREE.PerspectiveCamera(75, mountRef.current.clientWidth / mountRef.current.clientHeight, 0.1, 1000);\n        const renderer = new THREE.WebGLRenderer();\n        renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n        mountRef.current.appendChild(renderer.domElement);\n\n        // Load the 3D model; this will vary depending on the format of the model (e.g., GLTF)\n        // For this example, let's assume it's a GLTF model\n        const loader = new THREE.GLTFLoader();\n        loader.load(modelUrl, (gltf) => {\n          scene.add(gltf.scene);\n          camera.position.z = 5; // Adjust camera position as needed\n          animate();\n        });\n\n        // Animation loop\n        const animate = () => {\n          requestAnimationFrame(animate);\n          // Add any rotation or animation to the model here\n          renderer.render(scene, camera);\n        };\n      } catch (error) {\n        console.error(\"Error fetching 3D model from Meshcapade:\", error);\n      }\n    };\n\n    fetchModel();\n    // Cleanup Three.js resources when component unmounts\n    return () => {\n      if (mountRef.current) {\n        mountRef.current.innerHTML = '';\n      }\n    };\n  }, [photo]);\n\n  return <div ref={mountRef} style={{ width: '100%', height: '400px' }} />;\n};\n\nexport default MeshcapadeViewer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}