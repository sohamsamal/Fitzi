{"ast":null,"code":"var _jsxFileName = \"/Users/jasonlin/Desktop/fitzi2.0/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport * as THREE from 'three';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction AvatarAndFaceSwap() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [avatarName, setAvatarName] = useState('');\n  const [height, setHeight] = useState('');\n  const [weight, setWeight] = useState('');\n  const [gender, setGender] = useState('');\n  const [status, setStatus] = useState('Idle');\n  const [avatarId, setAvatarId] = useState('');\n  const [exportUrl, setExportUrl] = useState('');\n  const [resultImage, setResultImage] = useState(null);\n  const viewerRef = useRef(null);\n  const apiToken = '';\n  const faceSwapApiToken = 'user:893-aelqV9NKacC4TTkmhVc1l';\n  const targetImageUrls = {\n    male: 'https://i.ibb.co/6XkxwPM/male-dark.png',\n    female: 'https://i.ibb.co/fqyjSKK/woman-light.png'\n  };\n  useEffect(() => {\n    if (exportUrl) {\n      loadOBJModel(exportUrl);\n    }\n    const handleFileChange = event => {\n      setFile(event.target.files[0]);\n    };\n    const fetchImageAsBlob = async imageUrl => {\n      const response = await fetch(imageUrl);\n      const imageBlob = await response.blob();\n      return new File([imageBlob], 'target.jpg', {\n        type: 'image/jpeg'\n      });\n    };\n    const performFaceSwap = async sourceImage => {\n      try {\n        const targetImageUrl = gender === 'female' ? targetImageUrls.female : targetImageUrls.male;\n        const targetImageBlob = await fetchImageAsBlob(targetImageUrl);\n        let formData = new FormData();\n        formData.append('channel', 'Your_Channel_ID');\n        formData.append('idname', 'source');\n        formData.append('image', sourceImage);\n        await axios.post('https://api.useapi.net/v1/faceswap/saveid', formData, {\n          headers: {\n            'Authorization': `Bearer ${faceSwapApiToken}`,\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        formData = new FormData();\n        formData.append('channel', 'Your_Channel_ID');\n        formData.append('idname', 'source');\n        formData.append('image', targetImageBlob);\n        const response = await axios.post('https://api.useapi.net/v1/faceswap/swapid', formData, {\n          headers: {\n            'Authorization': `Bearer ${faceSwapApiToken}`,\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        if (response.data && response.data.attachments.length > 0) {\n          setResultImage(response.data.attachments[0].url);\n          return response.data.attachments[0].url;\n        }\n      } catch (error) {\n        console.error('Face swap error:', error);\n      }\n    };\n    const createAvatar = async () => {\n      setStatus('Creating Avatar...');\n      try {\n        const response = await axios.post('https://api.meshcapade.com/api/v1/avatars/create/from-images', {}, {\n          headers: {\n            'Authorization': `Bearer ${apiToken}`\n          }\n        });\n        setAvatarId(response.data.data.id);\n        return response.data.data.id;\n      } catch (error) {\n        console.error('Error creating avatar:', error);\n        setStatus('Error Creating Avatar');\n        throw error;\n      }\n    };\n    const getUploadLink = async avatarId => {\n      try {\n        const response = await axios.post(`https://api.meshcapade.com/api/v1/avatars/${avatarId}/images`, {}, {\n          headers: {\n            'Authorization': `Bearer ${apiToken}`\n          }\n        });\n        return response.data.data.links.upload;\n      } catch (error) {\n        console.error('Error obtaining upload link:', error);\n        throw error;\n      }\n    };\n    const uploadImage = async uploadUrl => {\n      try {\n        const formData = new FormData();\n        formData.append('file', file);\n        await axios.put(uploadUrl, file, {\n          headers: {\n            'Content-Type': 'image/png'\n          }\n        });\n        setStatus('Image Uploaded. Starting Fitting Process...');\n      } catch (error) {\n        console.error('Error uploading image:', error);\n        setStatus('Error Uploading Image');\n        throw error;\n      }\n    };\n    const startFittingProcess = async avatarId => {\n      try {\n        const response = await axios.post(`https://api.meshcapade.com/api/v1/avatars/${avatarId}/fit-to-images`, {\n          avatarname: avatarName,\n          height: parseInt(height),\n          weight: parseInt(weight),\n          gender: gender\n        }, {\n          headers: {\n            'Authorization': `Bearer ${apiToken}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        pollFittingStatus(avatarId); // Start polling for fitting status right after initiating the fitting process\n      } catch (error) {\n        console.error('Error starting fitting process:', error);\n        setStatus('Error Starting Fitting Process');\n        throw error;\n      }\n    };\n    const pollFittingStatus = async avatarId => {\n      try {\n        const response = await axios.get(`https://api.meshcapade.com/api/v1/avatars/${avatarId}`, {\n          headers: {\n            'Authorization': `Bearer ${apiToken}`\n          }\n        });\n        const fittingStatus = response.data.data.attributes.state;\n        const detailedStatus = response.data.data.attributes.detailedStatus; // Assuming this field exists\n\n        // Update the status message to include detailed information\n        setStatus(`Fitting Process: ${fittingStatus}. Details: ${detailedStatus || 'Processing...'}`);\n        if (fittingStatus === 'READY') {\n          setStatus('Fitting Process Complete. Starting Export...');\n          startExportProcess(avatarId);\n        } else if (fittingStatus === 'ERROR') {\n          // Handle any errors that might have occurred during the fitting process\n          setStatus('Error during fitting process. Please try again.');\n        } else {\n          // Continue polling if the process is not yet complete or in an error state\n          setTimeout(() => pollFittingStatus(avatarId), 5000); // Poll every 5 seconds\n        }\n      } catch (error) {\n        console.error('Error polling fitting status:', error);\n        setStatus('Error Polling Fitting Status');\n        throw error;\n      }\n    };\n    async function startExportProcess(avatarId) {\n      const exportResponse = await axios.post(`https://api.meshcapade.com/api/v1/avatars/${avatarId}/export`, {\n        format: 'obj',\n        // or 'fbx' depending on your needs\n        pose: 't'\n      }, {\n        headers: {\n          Authorization: `Bearer ${apiToken}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      pollExportStatus(exportResponse.data.data.id);\n    }\n    async function pollExportStatus(meshId) {\n      let isExported = false;\n      while (!isExported) {\n        const exportStatusResponse = await axios.get(`https://api.meshcapade.com/api/v1/meshes/${meshId}`, {\n          headers: {\n            Authorization: `Bearer ${apiToken}`\n          }\n        });\n        if (exportStatusResponse.data.data.attributes.state === 'READY') {\n          isExported = true;\n          setExportUrl(exportStatusResponse.data.data.attributes.url.path);\n          setStatus('Export complete. Model ready for viewing.');\n        } else {\n          await new Promise(resolve => setTimeout(resolve, 5000)); // Poll every 5 seconds\n        }\n      }\n    }\n    const handleSubmit = async event => {\n      event.preventDefault();\n      if (!file || !gender || !height || !weight || !avatarName) {\n        alert('Please fill all fields.');\n        return;\n      }\n      setStatus('Processing...');\n      try {\n        const faceSwappedImage = await performFaceSwap(file);\n        const newFile = await fetchImageAsBlob(faceSwappedImage); // Convert the swapped image URL back to a File object for uploading\n        setFile(newFile); // Update the file state with the face-swapped image\n        const newAvatarId = await createAvatar();\n        const uploadUrl = await getUploadLink(newAvatarId);\n        await uploadImage(uploadUrl, newFile); // Pass the face-swapped image to the upload function\n        await startFittingProcess(newAvatarId);\n      } catch (error) {\n        console.error('Error in the process:', error);\n        setStatus('Error in Process');\n      }\n    };\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xdddddd);\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    viewerRef.current.appendChild(renderer.domElement);\n\n    // Basic lighting setup\n    const ambientLight = new THREE.AmbientLight(0x404040);\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(0, 1, 1);\n    scene.add(directionalLight);\n\n    // Camera and OrbitControls setup\n    camera.position.z = 5;\n    const controls = new OrbitControls(camera, renderer.domElement);\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Adjust renderer and camera aspect ratio on resize\n    const handleResize = () => {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup on component unmount\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      viewerRef.current.removeChild(renderer.domElement);\n    };\n  }, []);\n  const loadOBJModel = url => {\n    const loader = new OBJLoader();\n    loader.load(url, obj => {\n      obj.scale.set(1.0, 1.0, 1.0);\n      scene.add(obj);\n      const box = new THREE.Box3().setFromObject(obj);\n      const center = box.getCenter(new THREE.Vector3());\n      camera.position.z = center.z + 3;\n      controls.update();\n    }, undefined, error => {\n      console.error('An error happened during the loading of the OBJ file:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Avatar Name\",\n        value: avatarName,\n        onChange: e => setAvatarName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: gender,\n        onChange: e => setGender(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Gender\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"male\",\n          children: \"Male\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"female\",\n          children: \"Female\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"neutral\",\n          children: \"Neutral\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Height in cm\",\n        value: height,\n        onChange: e => setHeight(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Weight in kg\",\n        value: weight,\n        onChange: e => setWeight(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Create Avatar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Status: \", status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: viewerRef,\n      style: {\n        width: '600px',\n        height: '400px',\n        background: '#aaa'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this), resultImage && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: resultImage,\n        alt: \"Result\",\n        style: {\n          width: '100px',\n          height: '100px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }, this)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 279,\n    columnNumber: 3\n  }, this);\n}\n_s(AvatarAndFaceSwap, \"yeJ0Ap2uVOU/oB0tleroC7f2iwc=\");\n_c = AvatarAndFaceSwap;\nexport default AvatarAndFaceSwap;\nvar _c;\n$RefreshReg$(_c, \"AvatarAndFaceSwap\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","THREE","OBJLoader","OrbitControls","jsxDEV","_jsxDEV","Fragment","_Fragment","AvatarAndFaceSwap","_s","file","setFile","avatarName","setAvatarName","height","setHeight","weight","setWeight","gender","setGender","status","setStatus","avatarId","setAvatarId","exportUrl","setExportUrl","resultImage","setResultImage","viewerRef","apiToken","faceSwapApiToken","targetImageUrls","male","female","loadOBJModel","handleFileChange","event","target","files","fetchImageAsBlob","imageUrl","response","fetch","imageBlob","blob","File","type","performFaceSwap","sourceImage","targetImageUrl","targetImageBlob","formData","FormData","append","post","headers","data","attachments","length","url","error","console","createAvatar","id","getUploadLink","links","upload","uploadImage","uploadUrl","put","startFittingProcess","avatarname","parseInt","pollFittingStatus","get","fittingStatus","attributes","state","detailedStatus","startExportProcess","setTimeout","exportResponse","format","pose","Authorization","pollExportStatus","meshId","isExported","exportStatusResponse","path","Promise","resolve","handleSubmit","preventDefault","alert","faceSwappedImage","newFile","newAvatarId","scene","Scene","background","Color","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","current","appendChild","domElement","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","position","set","z","controls","animate","requestAnimationFrame","render","handleResize","aspect","updateProjectionMatrix","addEventListener","removeEventListener","removeChild","loader","load","obj","scale","box","Box3","setFromObject","center","getCenter","Vector3","update","undefined","children","onSubmit","onChange","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","e","ref","style","width","src","alt","_c","$RefreshReg$"],"sources":["/Users/jasonlin/Desktop/fitzi2.0/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport * as THREE from 'three';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nfunction AvatarAndFaceSwap() {\n  const [file, setFile] = useState(null);\n  const [avatarName, setAvatarName] = useState('');\n  const [height, setHeight] = useState('');\n  const [weight, setWeight] = useState('');\n  const [gender, setGender] = useState('');\n  const [status, setStatus] = useState('Idle');\n  const [avatarId, setAvatarId] = useState('');\n  const [exportUrl, setExportUrl] = useState('');\n  const [resultImage, setResultImage] = useState(null);\n  const viewerRef = useRef(null);\n  const apiToken = '';\n  const faceSwapApiToken = 'user:893-aelqV9NKacC4TTkmhVc1l';\n\n  const targetImageUrls = {\n    male: 'https://i.ibb.co/6XkxwPM/male-dark.png',\n    female: 'https://i.ibb.co/fqyjSKK/woman-light.png',\n  };\n\n  \n  useEffect(() => {\n    if (exportUrl) {\n      loadOBJModel(exportUrl);\n    }\n\n  const handleFileChange = (event) => {\n    setFile(event.target.files[0]);\n  };\n\n  const fetchImageAsBlob = async (imageUrl) => {\n    const response = await fetch(imageUrl);\n    const imageBlob = await response.blob();\n    return new File([imageBlob], 'target.jpg', { type: 'image/jpeg' });\n  };\n\n  const performFaceSwap = async (sourceImage) => {\n    try {\n      const targetImageUrl = gender === 'female' ? targetImageUrls.female : targetImageUrls.male;\n      const targetImageBlob = await fetchImageAsBlob(targetImageUrl);\n\n      let formData = new FormData();\n      formData.append('channel', 'Your_Channel_ID');\n      formData.append('idname', 'source');\n      formData.append('image', sourceImage);\n\n      await axios.post('https://api.useapi.net/v1/faceswap/saveid', formData, {\n        headers: {\n          'Authorization': `Bearer ${faceSwapApiToken}`,\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n\n      formData = new FormData();\n      formData.append('channel', 'Your_Channel_ID');\n      formData.append('idname', 'source');\n      formData.append('image', targetImageBlob);\n\n      const response = await axios.post('https://api.useapi.net/v1/faceswap/swapid', formData, {\n        headers: {\n          'Authorization': `Bearer ${faceSwapApiToken}`,\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n\n      if (response.data && response.data.attachments.length > 0) {\n        setResultImage(response.data.attachments[0].url);\n        return response.data.attachments[0].url;\n      }\n    } catch (error) {\n      console.error('Face swap error:', error);\n    }\n  };\n\n\n  const createAvatar = async () => {\n    setStatus('Creating Avatar...');\n    try {\n      const response = await axios.post(\n        'https://api.meshcapade.com/api/v1/avatars/create/from-images', {}, \n        { headers: { 'Authorization': `Bearer ${apiToken}` } }\n      );\n      setAvatarId(response.data.data.id);\n      return response.data.data.id;\n    } catch (error) {\n      console.error('Error creating avatar:', error);\n      setStatus('Error Creating Avatar');\n      throw error;\n    }\n  };\n\n  const getUploadLink = async (avatarId) => {\n    try {\n      const response = await axios.post(\n        `https://api.meshcapade.com/api/v1/avatars/${avatarId}/images`, {}, \n        { headers: { 'Authorization': `Bearer ${apiToken}` } }\n      );\n      return response.data.data.links.upload;\n    } catch (error) {\n      console.error('Error obtaining upload link:', error);\n      throw error;\n    }\n  };\n\n  const uploadImage = async (uploadUrl) => {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      await axios.put(uploadUrl, file, { headers: { 'Content-Type': 'image/png' } });\n      setStatus('Image Uploaded. Starting Fitting Process...');\n    } catch (error) {\n      console.error('Error uploading image:', error);\n      setStatus('Error Uploading Image');\n      throw error;\n    }\n  };\n\n  const startFittingProcess = async (avatarId) => {\n    try {\n      const response = await axios.post(\n        `https://api.meshcapade.com/api/v1/avatars/${avatarId}/fit-to-images`,\n        {\n          avatarname: avatarName,\n          height: parseInt(height),\n          weight: parseInt(weight),\n          gender: gender\n        },\n        { headers: { 'Authorization': `Bearer ${apiToken}`, 'Content-Type': 'application/json' } }\n      );\n      pollFittingStatus(avatarId); // Start polling for fitting status right after initiating the fitting process\n    } catch (error) {\n      console.error('Error starting fitting process:', error);\n      setStatus('Error Starting Fitting Process');\n      throw error;\n    }\n  };\n\n  const pollFittingStatus = async (avatarId) => {\n    try {\n      const response = await axios.get(\n        `https://api.meshcapade.com/api/v1/avatars/${avatarId}`, \n        { headers: { 'Authorization': `Bearer ${apiToken}` } }\n      );\n      const fittingStatus = response.data.data.attributes.state;\n      const detailedStatus = response.data.data.attributes.detailedStatus; // Assuming this field exists\n      \n      // Update the status message to include detailed information\n      setStatus(`Fitting Process: ${fittingStatus}. Details: ${detailedStatus || 'Processing...'}`);\n  \n      if (fittingStatus === 'READY') {\n        setStatus('Fitting Process Complete. Starting Export...');\n        startExportProcess(avatarId);\n      } else if (fittingStatus === 'ERROR') {\n        // Handle any errors that might have occurred during the fitting process\n        setStatus('Error during fitting process. Please try again.');\n      } else {\n        // Continue polling if the process is not yet complete or in an error state\n        setTimeout(() => pollFittingStatus(avatarId), 5000); // Poll every 5 seconds\n      }\n    } catch (error) {\n      console.error('Error polling fitting status:', error);\n      setStatus('Error Polling Fitting Status');\n      throw error;\n    }\n  };\n  \n\n  async function startExportProcess(avatarId) {\n    const exportResponse = await axios.post(`https://api.meshcapade.com/api/v1/avatars/${avatarId}/export`, {\n        format: 'obj', // or 'fbx' depending on your needs\n        pose: 't',\n    }, {\n        headers: { Authorization: `Bearer ${apiToken}`, 'Content-Type': 'application/json' },\n    });\n    pollExportStatus(exportResponse.data.data.id);\n}\n\nasync function pollExportStatus(meshId) {\n    let isExported = false;\n    while (!isExported) {\n        const exportStatusResponse = await axios.get(`https://api.meshcapade.com/api/v1/meshes/${meshId}`, {\n            headers: { Authorization: `Bearer ${apiToken}` },\n        });\n        if (exportStatusResponse.data.data.attributes.state === 'READY') {\n            isExported = true;\n            setExportUrl(exportStatusResponse.data.data.attributes.url.path);\n            setStatus('Export complete. Model ready for viewing.');\n        } else {\n            await new Promise(resolve => setTimeout(resolve, 5000)); // Poll every 5 seconds\n        }\n    }\n}\n\n\nconst handleSubmit = async (event) => {\n  event.preventDefault();\n  if (!file || !gender || !height || !weight || !avatarName) {\n    alert('Please fill all fields.');\n    return;\n  }\n\n  setStatus('Processing...');\n  try {\n    const faceSwappedImage = await performFaceSwap(file);\n    const newFile = await fetchImageAsBlob(faceSwappedImage); // Convert the swapped image URL back to a File object for uploading\n    setFile(newFile); // Update the file state with the face-swapped image\n    const newAvatarId = await createAvatar();\n    const uploadUrl = await getUploadLink(newAvatarId);\n    await uploadImage(uploadUrl, newFile); // Pass the face-swapped image to the upload function\n    await startFittingProcess(newAvatarId);\n  } catch (error) {\n    console.error('Error in the process:', error);\n    setStatus('Error in Process');\n  }\n};\n\nconst scene = new THREE.Scene();\nscene.background = new THREE.Color(0xdddddd);\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\nconst renderer = new THREE.WebGLRenderer({ antialias: true });\nrenderer.setPixelRatio(window.devicePixelRatio);\nrenderer.setSize(window.innerWidth, window.innerHeight);\nviewerRef.current.appendChild(renderer.domElement);\n\n// Basic lighting setup\nconst ambientLight = new THREE.AmbientLight(0x404040);\nscene.add(ambientLight);\nconst directionalLight = new THREE.DirectionalLight(0xffffff, 1);\ndirectionalLight.position.set(0, 1, 1);\nscene.add(directionalLight);\n\n// Camera and OrbitControls setup\ncamera.position.z = 5;\nconst controls = new OrbitControls(camera, renderer.domElement);\n\n// Animation loop\nconst animate = () => {\n  requestAnimationFrame(animate);\n  renderer.render(scene, camera);\n};\nanimate();\n\n// Adjust renderer and camera aspect ratio on resize\nconst handleResize = () => {\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n};\nwindow.addEventListener('resize', handleResize);\n\n// Cleanup on component unmount\nreturn () => {\n  window.removeEventListener('resize', handleResize);\n  viewerRef.current.removeChild(renderer.domElement);\n};\n}, []);\n\nconst loadOBJModel = (url) => {\nconst loader = new OBJLoader();\nloader.load(url, (obj) => {\n  obj.scale.set(1.0, 1.0, 1.0);\n  scene.add(obj);\n  const box = new THREE.Box3().setFromObject(obj);\n  const center = box.getCenter(new THREE.Vector3());\n  camera.position.z = center.z + 3;\n  controls.update();\n}, undefined, (error) => {\n  console.error('An error happened during the loading of the OBJ file:', error);\n});\n};\n\n\nreturn (\n  <div>\n      <form onSubmit={handleSubmit}>\n          <input type=\"file\" onChange={handleFileChange} />\n          <input type=\"text\" placeholder=\"Avatar Name\" value={avatarName} onChange={(e) => setAvatarName(e.target.value)} />\n          <select value={gender} onChange={(e) => setGender(e.target.value)}>\n            <option value=\"\">Select Gender</option>\n            <option value=\"male\">Male</option>\n            <option value=\"female\">Female</option>\n            <option value=\"neutral\">Neutral</option>\n          </select>\n          <input type=\"number\" placeholder=\"Height in cm\" value={height} onChange={(e) => setHeight(e.target.value)} />\n          <input type=\"number\" placeholder=\"Weight in kg\" value={weight} onChange={(e) => setWeight(e.target.value)} />\n          <button type=\"submit\">Create Avatar</button>\n      </form>\n      <div>Status: {status}</div>\n      <div ref={viewerRef} style={{ width: '600px', height: '400px', background: '#aaa' }}></div>\n      {resultImage && (\n        <>\n          <img src={resultImage} alt=\"Result\" style={{ width: '100px', height: '100px' }} />\n        </>\n      )}\n  </div>\n);\n}\n\nexport default AvatarAndFaceSwap;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}