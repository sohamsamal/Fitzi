{"ast":null,"code":"var _jsxFileName = \"/Users/jasonlin/Desktop/fitzi2.0/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport * as THREE from 'three';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AvatarCreator() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [status, setStatus] = useState('Idle');\n  const [avatarId, setAvatarId] = useState('');\n  const [exportUrl, setExportUrl] = useState('');\n  const apiToken = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJuSnVpYzVwbXk1T1hGSjVmY1RIQTdUNVktRHZVbVVOR2xxVHBqS0hDVnU4In0.eyJleHAiOjE3MDk0ODA5NDcsImlhdCI6MTcwOTQ0ODkyMywiYXV0aF90aW1lIjoxNzA5NDQ0OTQ3LCJqdGkiOiI1OWQzZmY5YS1mOWYwLTQzNzItYWYyYi0wYmRmNDRjZWVmMTAiLCJpc3MiOiJodHRwczovL2F1dGgubWVzaGNhcGFkZS5jb20vcmVhbG1zL21lc2hjYXBhZGUtbWUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiNmIwNzcwMmYtZDNmOS00YmJlLWJkZWYtNGYyYTU5ZjMzMWQwIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoibWVzaGNhcGFkZS1tZSIsIm5vbmNlIjoiM2E1YmM4ZDctZTkyNS00NDVlLTg5YjktZTRkNzg2YjIyMmQwIiwic2Vzc2lvbl9zdGF0ZSI6ImM5MjM1ODdkLTY5NzktNDhjYi05YmMxLTJkODg4OWNiMjA3OSIsImFjciI6IjAiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9tZXNoY2FwYWRlLmNvbSIsImh0dHBzOi8vbWUubWVzaGNhcGFkZS5jb20iLCJodHRwczovL21lc2hjYXBhZGUubWUiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwiZGVmYXVsdC1yb2xlcy1nY21jIiwidW1hX2F1dGhvcml6YXRpb24iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIiwic2lkIjoiYzkyMzU4N2QtNjk3OS00OGNiLTliYzEtMmQ4ODg5Y2IyMDc5IiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJuYW1lIjoiRml0emkgU3RhcnR1cCIsInByZWZlcnJlZF91c2VybmFtZSI6ImZpdHppLnN0YXJ0dXBAZ21haWwuY29tIiwiZ2l2ZW5fbmFtZSI6IkZpdHppIiwiZmFtaWx5X25hbWUiOiJTdGFydHVwIiwicGljdHVyZSI6Imh0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS9hL0FDZzhvY0tJVjd4c202ZHRKSTV3SVNXbzBHV2pzTUpvMDdZWm80Sm5YdmozWENRbT1zOTYtYyIsImVtYWlsIjoiZml0emkuc3RhcnR1cEBnbWFpbC5jb20ifQ.Ver6BtxgNZ-jY91KSD-iNVQD5Mze93NOOjwK1NqlR18vmvNbbnYLMd__j358SRpIpeyZ_ZtyXL5IwP_okYdY31LxNvR7B80sf96Vg3QeA4f1t3QbKrYY8O2tFXCOIgSIBsak5efWqRKHAQdc1dZwvltJ0g7fGAEkOMwL6FLYhoHzQSzQYroohbfgXpciH8HQmYcT5HA6hWbJUPeeBQW7jlGEKwrI9FY9WbpP9TBxWpQYAASElukRIyxblcC0AvsK6eXtdHE2oyjBgKvOAaPGccEFrU_4ZByuaccSbPyHZJliRqfz88ob4mvDZqEmgcHRYuOHBUZjM0YzdMxJtXa7sg'; // Replace with your actual token\n  const viewerRef = useRef(null);\n  useEffect(() => {\n    if (exportUrl) {\n      loadOBJModel(exportUrl);\n    }\n  }, [exportUrl]);\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n  };\n  const createAvatar = async () => {\n    setStatus('Creating Avatar...');\n    try {\n      const response = await axios.post('https://api.meshcapade.com/api/v1/avatars/create/from-images', {}, {\n        headers: {\n          'Authorization': `Bearer ${apiToken}`\n        }\n      });\n      return response.data.data.id;\n    } catch (error) {\n      console.error('Error creating avatar:', error);\n      setStatus('Error Creating Avatar');\n      throw error;\n    }\n  };\n  const getUploadLink = async avatarId => {\n    try {\n      const response = await axios.post(`https://api.meshcapade.com/api/v1/avatars/${avatarId}/images`, {}, {\n        headers: {\n          'Authorization': `Bearer ${apiToken}`\n        }\n      });\n      return response.data.data.links.upload;\n    } catch (error) {\n      console.error('Error obtaining upload link:', error);\n      throw error;\n    }\n  };\n  const uploadImage = async uploadUrl => {\n    try {\n      await axios.put(uploadUrl, file, {\n        headers: {\n          'Content-Type': 'image/png'\n        }\n      });\n      setStatus('Image Uploaded. Starting Fitting Process...');\n    } catch (error) {\n      console.error('Error uploading image:', error);\n      setStatus('Error Uploading Image');\n      throw error;\n    }\n  };\n  const startFittingProcess = async avatarId => {\n    try {\n      const response = await axios.post(`https://api.meshcapade.com/api/v1/avatars/${avatarId}/fit-to-images`, {/* Fitting parameters */}, {\n        headers: {\n          'Authorization': `Bearer ${apiToken}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data.data.id; // Assuming the fitting process returns an ID to track status\n    } catch (error) {\n      console.error('Error starting fitting process:', error);\n      setStatus('Error Starting Fitting Process');\n      throw error;\n    }\n  };\n  const pollFittingStatus = async avatarId => {\n    try {\n      const response = await axios.get(`https://api.meshcapade.com/api/v1/avatars/${avatarId}`, {\n        headers: {\n          'Authorization': `Bearer ${apiToken}`\n        }\n      });\n      const fittingStatus = response.data.data.attributes.state;\n      const detailedStatus = response.data.data.attributes.detailedStatus; // Assuming this field exists\n\n      // Update the status message to include detailed information\n      setStatus(`Fitting Process: ${fittingStatus}. Details: ${detailedStatus || 'Processing...'}`);\n      if (fittingStatus === 'READY') {\n        setStatus('Fitting Process Complete. Starting Export...');\n        startExportProcess(avatarId);\n      } else if (fittingStatus === 'ERROR') {\n        // Handle any errors that might have occurred during the fitting process\n        setStatus('Error during fitting process. Please try again.');\n      } else {\n        // Continue polling if the process is not yet complete or in an error state\n        setTimeout(() => pollFittingStatus(avatarId), 5000); // Poll every 5 seconds\n      }\n    } catch (error) {\n      console.error('Error polling fitting status:', error);\n      setStatus('Error Polling Fitting Status');\n      throw error;\n    }\n  };\n  const startExportProcess = async avatarId => {\n    try {\n      const response = await axios.post(`https://api.meshcapade.com/api/v1/avatars/${avatarId}/export`, {\n        format: \"obj\",\n        pose: \"t\"\n      }, {\n        headers: {\n          'Authorization': `Bearer ${apiToken}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const meshId = response.data.data.id;\n      pollExportStatus(meshId);\n    } catch (error) {\n      console.error('Error starting export process:', error);\n      setStatus('Error Starting Export Process');\n      throw error;\n    }\n  };\n  const pollExportStatus = async meshId => {\n    try {\n      const response = await axios.get(`https://api.meshcapade.com/api/v1/meshes/${meshId}`, {\n        headers: {\n          'Authorization': `Bearer ${apiToken}`\n        }\n      });\n      const meshStatus = response.data.data.attributes.state;\n      if (meshStatus === 'READY') {\n        setExportUrl(response.data.data.attributes.url.path);\n        setStatus('Export Ready. Download your avatar.');\n      } else {\n        setTimeout(() => pollExportStatus(meshId), 5000); // Poll every 5 seconds\n      }\n    } catch (error) {\n      console.error('Error polling export status:', error);\n      setStatus('Error Polling Export Status');\n      throw error;\n    }\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (!file) {\n      alert('Please select a file.');\n      return;\n    }\n    try {\n      setStatus('Processing...');\n      const newAvatarId = await createAvatar();\n      setAvatarId(newAvatarId);\n      const uploadUrl = await getUploadLink(newAvatarId);\n      await uploadImage(uploadUrl);\n      await startFittingProcess(newAvatarId);\n      pollFittingStatus(newAvatarId); // Poll the fitting status\n    } catch (error) {\n      console.error('Error in the process:', error);\n      setStatus('Error in Process');\n    }\n  };\n  function loadOBJModel(url) {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, viewerRef.current.clientWidth / viewerRef.current.clientHeight, 0.1, 1000);\n    camera.position.z = 5;\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(viewerRef.current.clientWidth, viewerRef.current.clientHeight);\n    viewerRef.current.appendChild(renderer.domElement);\n    new OrbitControls(camera, renderer.domElement);\n    new OBJLoader().load(url, obj => {\n      scene.add(obj);\n      animate();\n    });\n    function animate() {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Create Avatar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Status: \", status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: viewerRef,\n      style: {\n        width: '600px',\n        height: '400px',\n        background: '#aaa'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n}\n_s(AvatarCreator, \"jHrBta2DBTuG6jtPAWRRB7x1Ezk=\");\n_c = AvatarCreator;\nexport default AvatarCreator;\nvar _c;\n$RefreshReg$(_c, \"AvatarCreator\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","THREE","OBJLoader","OrbitControls","jsxDEV","_jsxDEV","AvatarCreator","_s","file","setFile","status","setStatus","avatarId","setAvatarId","exportUrl","setExportUrl","apiToken","viewerRef","loadOBJModel","handleFileChange","event","target","files","createAvatar","response","post","headers","data","id","error","console","getUploadLink","links","upload","uploadImage","uploadUrl","put","startFittingProcess","pollFittingStatus","get","fittingStatus","attributes","state","detailedStatus","startExportProcess","setTimeout","format","pose","meshId","pollExportStatus","meshStatus","url","path","handleSubmit","preventDefault","alert","newAvatarId","scene","Scene","camera","PerspectiveCamera","current","clientWidth","clientHeight","position","z","renderer","WebGLRenderer","setSize","appendChild","domElement","load","obj","add","animate","requestAnimationFrame","render","children","onSubmit","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","width","height","background","_c","$RefreshReg$"],"sources":["/Users/jasonlin/Desktop/fitzi2.0/src/App.js"],"sourcesContent":["\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport * as THREE from 'three';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\n\nfunction AvatarCreator() {\n  const [file, setFile] = useState(null);\n  const [status, setStatus] = useState('Idle');\n  const [avatarId, setAvatarId] = useState('');\n  const [exportUrl, setExportUrl] = useState('');\n  const apiToken = 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJuSnVpYzVwbXk1T1hGSjVmY1RIQTdUNVktRHZVbVVOR2xxVHBqS0hDVnU4In0.eyJleHAiOjE3MDk0ODA5NDcsImlhdCI6MTcwOTQ0ODkyMywiYXV0aF90aW1lIjoxNzA5NDQ0OTQ3LCJqdGkiOiI1OWQzZmY5YS1mOWYwLTQzNzItYWYyYi0wYmRmNDRjZWVmMTAiLCJpc3MiOiJodHRwczovL2F1dGgubWVzaGNhcGFkZS5jb20vcmVhbG1zL21lc2hjYXBhZGUtbWUiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiNmIwNzcwMmYtZDNmOS00YmJlLWJkZWYtNGYyYTU5ZjMzMWQwIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoibWVzaGNhcGFkZS1tZSIsIm5vbmNlIjoiM2E1YmM4ZDctZTkyNS00NDVlLTg5YjktZTRkNzg2YjIyMmQwIiwic2Vzc2lvbl9zdGF0ZSI6ImM5MjM1ODdkLTY5NzktNDhjYi05YmMxLTJkODg4OWNiMjA3OSIsImFjciI6IjAiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9tZXNoY2FwYWRlLmNvbSIsImh0dHBzOi8vbWUubWVzaGNhcGFkZS5jb20iLCJodHRwczovL21lc2hjYXBhZGUubWUiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwiZGVmYXVsdC1yb2xlcy1nY21jIiwidW1hX2F1dGhvcml6YXRpb24iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIiwic2lkIjoiYzkyMzU4N2QtNjk3OS00OGNiLTliYzEtMmQ4ODg5Y2IyMDc5IiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJuYW1lIjoiRml0emkgU3RhcnR1cCIsInByZWZlcnJlZF91c2VybmFtZSI6ImZpdHppLnN0YXJ0dXBAZ21haWwuY29tIiwiZ2l2ZW5fbmFtZSI6IkZpdHppIiwiZmFtaWx5X25hbWUiOiJTdGFydHVwIiwicGljdHVyZSI6Imh0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS9hL0FDZzhvY0tJVjd4c202ZHRKSTV3SVNXbzBHV2pzTUpvMDdZWm80Sm5YdmozWENRbT1zOTYtYyIsImVtYWlsIjoiZml0emkuc3RhcnR1cEBnbWFpbC5jb20ifQ.Ver6BtxgNZ-jY91KSD-iNVQD5Mze93NOOjwK1NqlR18vmvNbbnYLMd__j358SRpIpeyZ_ZtyXL5IwP_okYdY31LxNvR7B80sf96Vg3QeA4f1t3QbKrYY8O2tFXCOIgSIBsak5efWqRKHAQdc1dZwvltJ0g7fGAEkOMwL6FLYhoHzQSzQYroohbfgXpciH8HQmYcT5HA6hWbJUPeeBQW7jlGEKwrI9FY9WbpP9TBxWpQYAASElukRIyxblcC0AvsK6eXtdHE2oyjBgKvOAaPGccEFrU_4ZByuaccSbPyHZJliRqfz88ob4mvDZqEmgcHRYuOHBUZjM0YzdMxJtXa7sg'; // Replace with your actual token\n  const viewerRef = useRef(null);\n\n\n  useEffect(() => {\n    if (exportUrl) {\n        loadOBJModel(exportUrl);\n    }\n}, [exportUrl]);\n\n  const handleFileChange = (event) => {\n    setFile(event.target.files[0]);\n  };\n\n  const createAvatar = async () => {\n    setStatus('Creating Avatar...');\n    try {\n      const response = await axios.post(\n        'https://api.meshcapade.com/api/v1/avatars/create/from-images', {}, \n        { headers: { 'Authorization': `Bearer ${apiToken}` } }\n      );\n      return response.data.data.id;\n    } catch (error) {\n      console.error('Error creating avatar:', error);\n      setStatus('Error Creating Avatar');\n      throw error;\n    }\n  };\n\n  const getUploadLink = async (avatarId) => {\n    try {\n      const response = await axios.post(\n        `https://api.meshcapade.com/api/v1/avatars/${avatarId}/images`, {}, \n        { headers: { 'Authorization': `Bearer ${apiToken}` } }\n      );\n      return response.data.data.links.upload;\n    } catch (error) {\n      console.error('Error obtaining upload link:', error);\n      throw error;\n    }\n  };\n\n  const uploadImage = async (uploadUrl) => {\n    try {\n      await axios.put(uploadUrl, file, { headers: { 'Content-Type': 'image/png' } });\n      setStatus('Image Uploaded. Starting Fitting Process...');\n    } catch (error) {\n      console.error('Error uploading image:', error);\n      setStatus('Error Uploading Image');\n      throw error;\n    }\n  };\n\n  const startFittingProcess = async (avatarId) => {\n    try {\n      const response = await axios.post(\n        `https://api.meshcapade.com/api/v1/avatars/${avatarId}/fit-to-images`,\n        { /* Fitting parameters */ },\n        { headers: { 'Authorization': `Bearer ${apiToken}`, 'Content-Type': 'application/json' } }\n      );\n      return response.data.data.id; // Assuming the fitting process returns an ID to track status\n    } catch (error) {\n      console.error('Error starting fitting process:', error);\n      setStatus('Error Starting Fitting Process');\n      throw error;\n    }\n  };\n\n  const pollFittingStatus = async (avatarId) => {\n    try {\n      const response = await axios.get(\n        `https://api.meshcapade.com/api/v1/avatars/${avatarId}`, \n        { headers: { 'Authorization': `Bearer ${apiToken}` } }\n      );\n      const fittingStatus = response.data.data.attributes.state;\n      const detailedStatus = response.data.data.attributes.detailedStatus; // Assuming this field exists\n      \n      // Update the status message to include detailed information\n      setStatus(`Fitting Process: ${fittingStatus}. Details: ${detailedStatus || 'Processing...'}`);\n  \n      if (fittingStatus === 'READY') {\n        setStatus('Fitting Process Complete. Starting Export...');\n        startExportProcess(avatarId);\n      } else if (fittingStatus === 'ERROR') {\n        // Handle any errors that might have occurred during the fitting process\n        setStatus('Error during fitting process. Please try again.');\n      } else {\n        // Continue polling if the process is not yet complete or in an error state\n        setTimeout(() => pollFittingStatus(avatarId), 5000); // Poll every 5 seconds\n      }\n    } catch (error) {\n      console.error('Error polling fitting status:', error);\n      setStatus('Error Polling Fitting Status');\n      throw error;\n    }\n  };\n  \n\n  const startExportProcess = async (avatarId) => {\n    try {\n      const response = await axios.post(\n        `https://api.meshcapade.com/api/v1/avatars/${avatarId}/export`,\n        { format: \"obj\", pose: \"t\" },\n        { headers: { 'Authorization': `Bearer ${apiToken}`, 'Content-Type': 'application/json' } }\n      );\n      const meshId = response.data.data.id;\n      pollExportStatus(meshId);\n    } catch (error) {\n      console.error('Error starting export process:', error);\n      setStatus('Error Starting Export Process');\n      throw error;\n    }\n  };\n\n  const pollExportStatus = async (meshId) => {\n    try {\n      const response = await axios.get(\n        `https://api.meshcapade.com/api/v1/meshes/${meshId}`,\n        { headers: { 'Authorization': `Bearer ${apiToken}` } }\n      );\n      const meshStatus = response.data.data.attributes.state;\n      if (meshStatus === 'READY') {\n        setExportUrl(response.data.data.attributes.url.path);\n        setStatus('Export Ready. Download your avatar.');\n      } else {\n        setTimeout(() => pollExportStatus(meshId), 5000); // Poll every 5 seconds\n      }\n    } catch (error) {\n      console.error('Error polling export status:', error);\n      setStatus('Error Polling Export Status');\n      throw error;\n    }\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    if (!file) {\n      alert('Please select a file.');\n      return;\n    }\n\n    try {\n      setStatus('Processing...');\n      const newAvatarId = await createAvatar();\n      setAvatarId(newAvatarId);\n      const uploadUrl = await getUploadLink(newAvatarId);\n      await uploadImage(uploadUrl);\n      await startFittingProcess(newAvatarId);\n      pollFittingStatus(newAvatarId); // Poll the fitting status\n    } catch (error) {\n      console.error('Error in the process:', error);\n      setStatus('Error in Process');\n    }\n  };\n\n  function loadOBJModel(url) {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, viewerRef.current.clientWidth / viewerRef.current.clientHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(viewerRef.current.clientWidth, viewerRef.current.clientHeight);\n    viewerRef.current.appendChild(renderer.domElement);\n\n    new OrbitControls(camera, renderer.domElement);\n\n    new OBJLoader().load(url, (obj) => {\n        scene.add(obj);\n        animate();\n    });\n\n    function animate() {\n        requestAnimationFrame(animate);\n        renderer.render(scene, camera);\n    }\n}\n\nreturn (\n    <div>\n        <form onSubmit={handleSubmit}>\n            <input type=\"file\" onChange={handleFileChange} />\n            <button type=\"submit\">Create Avatar</button>\n        </form>\n        <div>Status: {status}</div>\n        <div ref={viewerRef} style={{ width: '600px', height: '400px', background: '#aaa' }}></div>\n    </div>\n);\n}\n\nexport default AvatarCreator;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}